# ------------------------------------------------------------------------------------------
# Copyright James A. Dooley 2021.
#
# Distributed under the MIT License.
# (See accompanying file license.md file or copy at http://opensource.org/licenses/MIT)
#
# ------------------------------------------------------------------------------------------

from microbit import i2c, sleep

_DEFAULT_ADDRESS = 0x3C

_MEMORY_MODE     = 0x20
_DATA_MODE       = 0x40
_COMMAND_MODE    = 0x80

_NORMAL_DISPLAY  = 0xA6
 
_DISPLAY_OFF     = 0xAE
_DISPLAY_ON      = 0xAF
_INVERSE_DISPLAY = 0xA7

_HORIZONTAL      = 0x00

_FONT            = [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00],
                    [0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00],
                    [0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00],
                    [0x00, 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00],
                    [0x00, 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00],
                    [0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00, 0x00],
                    [0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00],
                    [0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00],
                    [0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00],
                    [0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00],
                    [0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00],
                    [0x00, 0x62, 0x51, 0x49, 0x49, 0x46, 0x00, 0x00],
                    [0x00, 0x22, 0x41, 0x49, 0x49, 0x36, 0x00, 0x00],
                    [0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00],
                    [0x00, 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00],
                    [0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00],
                    [0x00, 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00],
                    [0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00],
                    [0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00],
                    [0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x00, 0xAC, 0x6C, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00],
                    [0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00],
                    [0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00],
                    [0x00, 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00],
                    [0x00, 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00, 0x00],
                    [0x00, 0x7E, 0x09, 0x09, 0x09, 0x7E, 0x00, 0x00],
                    [0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00],
                    [0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00],
                    [0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00],
                    [0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00],
                    [0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00],
                    [0x00, 0x3E, 0x41, 0x41, 0x51, 0x72, 0x00, 0x00],
                    [0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00],
                    [0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00],
                    [0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00],
                    [0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00],
                    [0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00],
                    [0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00],
                    [0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00],
                    [0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00],
                    [0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00],
                    [0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00],
                    [0x00, 0x26, 0x49, 0x49, 0x49, 0x32, 0x00, 0x00],
                    [0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00],
                    [0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00],
                    [0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00],
                    [0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00, 0x00],
                    [0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00],
                    [0x00, 0x03, 0x04, 0x78, 0x04, 0x03, 0x00, 0x00],
                    [0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00],
                    [0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00],
                    [0x00, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00],
                    [0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00],
                    [0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00],
                    [0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00],
                    [0x00, 0x38, 0x44, 0x44, 0x28, 0x00, 0x00, 0x00],
                    [0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00, 0x00],
                    [0x00, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00],
                    [0x00, 0x08, 0x7E, 0x09, 0x02, 0x00, 0x00, 0x00],
                    [0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00, 0x00],
                    [0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00],
                    [0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x80, 0x84, 0x7D, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00],
                    [0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00],
                    [0x00, 0x7C, 0x08, 0x04, 0x7C, 0x00, 0x00, 0x00],
                    [0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00],
                    [0x00, 0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00],
                    [0x00, 0x18, 0x24, 0x24, 0xFC, 0x00, 0x00, 0x00],
                    [0x00, 0x00, 0x7C, 0x08, 0x04, 0x00, 0x00, 0x00],
                    [0x00, 0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00],
                    [0x00, 0x04, 0x7F, 0x44, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x3C, 0x40, 0x40, 0x7C, 0x00, 0x00, 0x00],
                    [0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00],
                    [0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00],
                    [0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00],
                    [0x00, 0x1C, 0xA0, 0xA0, 0x7C, 0x00, 0x00, 0x00],
                    [0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00],
                    [0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00],
                    [0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00],
                    [0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00]]

# The follow initialization sequence was not in the Seeedstudio example,
# but from testing and the datasheet it is required.
_INIT_COMMANDS = [[0xAE],
                  [0xA4],
                  [0xD5, 0xF0],
                  [0xA8, 0x3F],
                  [0xD3, 0x00],
                  [0 | 0x0],
                  [0x8D, 0x14],
                  [0x20, 0x00],
                  [0x21, 0, 127],
                  [0x22, 0, 63],
                  [0xa0 | 0x1],
                  [0xc8],
                  [0xDA, 0x12],
                  [0x81, 0xCF],
                  [0xd9, 0xF1],
                  [0xDB, 0x40],
                  [0xA6],
                  [0xd6, 1],
                  [0xaf]]

class OledSSD1315:
    def __init__(self):
        self._device_address = _DEFAULT_ADDRESS
 
        for cmd in _INIT_COMMANDS:
            i2c.write(self._device_address, b'\x00' + bytearray(cmd))
            
        self.off()
        self._inverse = False
        self._mode = _HORIZONTAL
 
        self.clear()
        self.on()
        
    def _write_command(self, address, value):
        i2c.write(self._device_address, bytes((address, value)))
                
    def _set_cursor(self, row, column):
        self._write_command(_COMMAND_MODE, 0xB0 + row)
        self._write_command(_COMMAND_MODE, 0x00 + (8 * column & 0x0F))
        self._write_command(_COMMAND_MODE, 0x10 + ((8 * column >> 4) & 0x0F))
 
    def _write_character(self, value):
        value = ord(value)
        
        # We only handle ASCII characters
        if value < 32 or value > 127:
            value = ' '
            value = ord(value)
 
        for i in range(0, 8):
            self._write_command(_DATA_MODE, _FONT[value - 32][i])
 
    def _write_string(self, value):
        for char in value:
            self._write_character(char)
    
    def get_inverse(self):
        return self._inverse
 
    def set_inverse(self, value):
        self._write_command(_COMMAND_MODE, _INVERSE_DISPLAY if value else _NORMAL_DISPLAY)
        self._inverse = value
 
    def on(self):
        self._write_command(_COMMAND_MODE, _DISPLAY_ON)
 
    def off(self):
        self._write_command(_COMMAND_MODE, _DISPLAY_OFF)
    
    def clear(self):
        self.off()
        for i in range(8):
            self._set_cursor(i, 0)
            self._write_string(' ' * 16)
 
        self.on()
        self._set_cursor(0, 0)
        
    def string(self, x, y, value):
        self._set_cursor(x, y)
        self._write_string(value)
        
    def character(self, x, y, value):
        self._set_cursor(x, y)
        self._write_character(value)
        
    def number(self, x, y, value):
        self.string(x, y, str(value))
        
def main():
    i2c.init()
    display = OledSSD1315()
    
    display.set_inverse(False)
    display.clear()
    display.string(2, 2, 'Hello, World')
    
    sleep(3000)
    
    display.set_inverse(True)
    display.clear()
    display.string(2, 2, 'Hello, World')    
    sleep(3000)
    
    display.set_inverse(False)
    display.clear()
    display.string(2, 3, 'Going off')
    sleep(1000)
    display.off()
    sleep(2000)
    display.on()
    display.clear()
    display.string(2, 4, 'On again')
    sleep(3000)
    
    display.set_inverse(False)
    display.clear()
    display.string(2, 4, 'The End')
    sleep(1000)
    display.off()
    
if __name__ == '__main__':
    main()
